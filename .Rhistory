hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num <- length(hg[[i]]$name)
out[i, "hospital"] <- hg[[i]][num, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
}
return(out)
}
rankall("pneumonia", "worst")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
rankhospital("WY", "worst")
rankhospital("WY", "pneumonia", "worst")
rankall <- function(outcome, num = "best") {
require(dplyr)
## Read outcome hospitals
hospitals <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- tbl_df(hospitals)
hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num <- length(hg[[i]]$name)
out[i, "hospital"] <- hg[[i]][num, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
sprint("Worst is rank %s in state %s", num, out[i, "state"])
}
return(out)
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
require(dplyr)
## Read outcome hospitals
hospitals <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- tbl_df(hospitals)
hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num <- length(hg[[i]]$name)
out[i, "hospital"] <- hg[[i]][num, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
sprintf("Worst is rank %s in state %s", num, out[i, "state"])
}
return(out)
}
rankhospital("WY", "pneumonia", "worst")
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
require(dplyr)
## Read outcome hospitals
hospitals <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- tbl_df(hospitals)
hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num <- length(hg[[i]]$name)
print(as.character(num))
out[i, "hospital"] <- hg[[i]][num, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
}
return(out)
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
require(dplyr)
## Read outcome hospitals
hospitals <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- tbl_df(hospitals)
hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num <- length(hg[[i]]$name)
print(hg[[i]])
out[i, "hospital"] <- hg[[i]][num, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
}
return(out)
}
tail(rankall("pneumonia", "worst"), 3)
rankall <- function(outcome, num = "best") {
require(dplyr)
## Read outcome hospitals
hospitals <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
hospitals <- tbl_df(hospitals)
hospitals <- select(hospitals, c(2, 7, 11, 17, 23))
## Rename the outcome names of interst
names(hospitals)[3]  <- "heart attack"
names(hospitals)[4]  <- "heart failure"
names(hospitals)[5]  <- "pneumonia"
## Check that state and outcome are valid
if (!(state %in% hospitals$State)) {
stop("invalid state")
}
if (!(outcome %in% c("heart attack", "heart failure", "pneumonia"))) {
stop("invalid outcome")
}
col.index <- names(hospitals) == outcome
## Select only hospital name, state, and outcome column
hospitals <- cbind(hospitals[, 1:2], hospitals[, col.index])
## Change the outcome name to "rate" for ease of manupulation
names(hospitals) <- c("name", "state", "rate")
options(warn=-1)
hospitals$rate <- sapply(hospitals$rate, as.numeric)
options(warn=0)
## Retain only complete cases
hospitals2 <- hospitals[complete.cases(hospitals),]
## Split by state
hg <- split(hospitals2, hospitals2$state, )
if (num == "best") num1  <- 1
out <- data.frame(hospital = character(0), state = character(0), stringsAsFactors = FALSE)
for (i in 1:54) {
hg[[i]] <- arrange(hg[[i]], rate, name)
if (num == "worst") num1 <- length(hg[[i]]$name)
out[i, "hospital"] <- hg[[i]][num1, "name"]
out[i, "state"] <- hg[[i]][1, "state"]
}
return(out)
}
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
submit()
library(ggplot2)
library(dplyr)
diamonds <- data.frame(diamonds)
View(diamonds)
names(diamonds)[8] <- "length"
names(diamonds)[9] <- "width"
names(diamonds)[10] <- "depth"
names(diamonds)[5] <- "depthperc"
View(diamonds)
diamonds <- mutate(diamon, cubic = length*width*depth)
diamonds <- mutate(diamonds, cubic = length*width*depth)
diamonds
diamonds <- mutate(diamonds, total = length + width + depth)
head(diamonds)
diamonds$total <- NULL
head(diamonds)
colMeans(diamonds, c(1, 5:11))
colMeans(diamonds, c(1, 5:11))
str(diamonds)
colMeans(diamonds[, c(1, 5:11)])
library(ggplot2)
require(swirl)
swirl()
install_from_swirl("Getting_And_Cleaning_Data")
18/107
89/107
4/55
14/52
.0.7-0.26
.07-0.26
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$TimeDate <- paste(power$Date, power$Time)
head(power$TimeDate)
power <- transform(power, TimeDate = strptime(TimeDate, "%d/%m/%Y H:%M:%S"))
str(power)
power$TimeDate <- paste(power$Date, power$Time)
power <- transform(power, TimeDate = strptime(TimeDate, "%d/%m/%Y %H:%M:%S"))
head(power$TimeDate)
power$TimeDate <- paste(power$Date, power$Time)
head(power$TimeDate)
power <- transform(power, TimeDate = strptime(TimeDate, "%Y/%m/%d %H:%M:%S"))
head(power$TimeDate)
power$TimeDate <- paste(power$Date, power$Time)
power <- transform(power, TimeDate = strptime(TimeDate, "%Y/%m/%d %H:%M:%S"))
head(power$TimeDate)
head(power$TimeDate)
power$TimeDate <- paste(power$Date, power$Time)
head(power$TimeDate)
power$TimeDate <- paste(power$Date, power$Time)
power <- transform(power, TimeDate = strptime(TimeDate, "%Y-%m-%d %H:%M:%S"))
head(power$TimeDate)
str(power)
with(power, plot(TimeDate, Global_active_power, col = "red", ylab = "Global Active Power (kilowatts)")
with(power, plot(TimeDate, Global_active_power, col = "red", ylab = "Global Active Power (kilowatts)"))
with(power, plot(x = TimeDate, y = Global_active_power, ylab = "Global Active Power (kilowatts)"))
with(power, plot(x = TimeDate, y = Global_active_power, ylab = "Global Active Power (kilowatts)", type = "l"))
png("plot2.png", width = 480, height = 480)
with(power, plot(x = TimeDate, y = Global_active_power, ylab = "Global Active Power (kilowatts)", type = "l"))
dev.off()
png("plot2.png", width = 480, height = 480)
with(power, plot(x = TimeDate, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
dev.off()
ower <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$datetime <- paste(power$Date, power$Time)
power <- transform(power, datetime = strptime(datetime, "%Y-%m-%d %H:%M:%S"))
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$datetime <- paste(power$Date, power$Time)
power <- transform(power, datetime = strptime(datetime, "%Y-%m-%d %H:%M:%S"))
str(power)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright")
legend("topright", pch = 1)
legend("topright", legend = "x")
legend("topright", legend = "Sub_metering_1")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2"))
legend("topright", legend = "Sub_metering_2", pch = 2)
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), pch = 2)
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), pch = 7)
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1)
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
png("plot3.png", height = 480, width = 480)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off
png("plot3.png", height = 480, width = 480)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off
png("plot3.png", height = 480, width = 480)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off
png("plot3.png", height = 480, width = 480)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
par(mfrow = c(2, 2, 1, 1)
par(mfrow = c(2, 2, 1, 1))
par(mfrow) <- c(2, 2, 1, 1)
par("mfrow") <- c(2, 2, 1, 1)
par("mfrow")
par(mfrow = c(2, 2)
par(mfrow = c(2, 2))
par("mfrow" = c(2, 2))
par("mfrow")
par(mfrow = c(2, 2))
par("mfrow")
with(power, plot(x = TimeDate, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
par(mar = c(2, 2, 1, 1))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
par(mar = c(4, 4, 2, 2))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off()
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 2))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
with(power, plot(x = datetime, y = Voltage))
with(power, plot(x = datetime, y = Voltage, type = "l"))
with(power, plot(x = datetime, y = Global_reactive_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(x = datetime, y = Global_reactive_power, xlab = "", ylab = "Global Reactive Power", type = "l"))
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 2))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(x = datetime, y = Voltage, type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
with(power, plot(x = datetime, y = Global_reactive_power, xlab = "", ylab = "Global Reactive Power", type = "l"))
par(mfrow = c(2, 2))
par(mar = c(5, 4, 2, 2))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(x = datetime, y = Voltage, type = "l"))
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
with(power, plot(x = datetime, y = Global_reactive_power, xlab = "", ylab = "Global Reactive Power", type = "l"))
# Close graphic device and save the file
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 2))
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
with(power, plot(x = datetime, y = Voltage, type = "l"))
# Plot sub metering time series
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
# Plot Globe re-active power time series
with(power, plot(x = datetime, y = Global_reactive_power, type = "l"))
png("plot4.png", height = 480, width = 480)
# Set the arrangement and margins
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 2))
# Plot Global active power time series
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power", type = "l"))
# Plot Volatage time series
with(power, plot(x = datetime, y = Voltage, type = "l"))
# Plot sub metering time series
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
# Plot Globe re-active power time series
with(power, plot(x = datetime, y = Global_reactive_power, type = "l"))
# Close graphic device and save the file
dev.off()
getwd()
setwd("c:/Users//Phat//Desktop/ExData_Plotting1/")
png("plot4.png", height = 480, width = 480)
# Set the arrangement and margins
par(mfrow = c(2, 2))
par(mar = c(4, 4, 2, 2))
# Plot Global active power time series
with(power, plot(x = datetime, y = Global_active_power, xlab = "", ylab = "Global Active Power", type = "l"))
# Plot Volatage time series
with(power, plot(x = datetime, y = Voltage, type = "l"))
# Plot sub metering time series
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
# Plot Globe re-active power time series
with(power, plot(x = datetime, y = Global_reactive_power, type = "l"))
# Close graphic device and save the file
dev.off()
setwd("c:/Users//Phat//Desktop/ExData_Plotting1/")
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip", destfile = "power.zip", mode = "wb")
unzip("power.zip")
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$TimeDate <- paste(power$Date, power$Time)
power <- transform(power, TimeDate = strptime(TimeDate, "%Y-%m-%d %H:%M:%S"))
# Global Active Power histogram
png("plot1.png", width = 480, height = 480)
with(power, hist(Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", main = "Global Active Power"))
dev.off()
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$TimeDate <- paste(power$Date, power$Time)
power <- transform(power, TimeDate = strptime(TimeDate, "%Y-%m-%d %H:%M:%S"))
png("plot2.png", width = 480, height = 480)
with(power, plot(x = TimeDate, y = Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)", type = "l"))
dev.off()
power <- read.csv("household_power_consumption.txt", na.strings = "?", stringsAsFactors = F, sep = ";")
power <- power[power$Date %in% c("1/2/2007", "2/2/2007"), ]
power$Date <- as.Date(power$Date, "%d/%m/%Y")
power$datetime <- paste(power$Date, power$Time)
power <- transform(power, datetime = strptime(datetime, "%Y-%m-%d %H:%M:%S"))
png("plot3.png", height = 480, width = 480)
with(power, plot(datetime, Sub_metering_1,  col = "black", type = "l", xlab = "", ylab = "Energy sub metering"))
with(power, lines(datetime, Sub_metering_2, col = "red"))
with(power, lines(datetime, Sub_metering_3, col = "blue"))
legend("topright", c("Sub_metering_1","Sub_metering_2", "Sub_metering_3"), lty = 1, col = c("black", "red", "blue"))
dev.off()
